This file is intended as a brief overview for those who are interested in
hacking Anonymine, and as a maintenance manual for me.

Undocumented: test.py


Files in this package
=====================

Asterisk marks that the file will be created during building.

  BUGS                  Known bugs, may also include descriptions of old bugs
  ChangeLog             --
  FAQ                   --
  INSTALL               Installation instructions
* Makefile              (Generated by ./configure)
  Makefile.static       The source file for Makefile
  NEWS                  --
  README                (It's an order! :)
* anonymine             (Generated by make)
  anonymine.py          The curses interface for game (interface/engine)
  anonymine_engine.py   The engine part of the game (interface/engine)
  anonymine_fields.py   Defines the minefields
  anonymine_solver.py   Solving algorithm
* check.py              Self-tests to prevent embarrassing releases
  check.sh              Self-tests to prevent embarrassing releases
  configure             See "INSTALL"
  configure.py          Used internally by configure
  cursescfg             The configuration file for the curses interface
  enginecfg.default
* enginecfg.out         The configuration file for the game's engine
? enginecfg.user        Create this yourself if you want to
  install-cfg           Script for installing configuration files
  mkenginecfg           Create enginecfg.out
  test.py               Misc small unnecessary functions: demos, etc
  desktop/              Non-essential files for the graphical environments:
    FILES               List of files.
    README              Overview of the contents of the desktop directory.


Game construction
=================

    anonymine.py
      |
      +--anonymine_engine.py
      |    |
      |    +--anonymine_solver.py
      |    |
      |    +--anonymine_fields.py
      |    |
      |    \--enginecfg
      |
      \--cursescfg


Game engine ("anonymine_engine.py")
-----------------------------------

    The interface is an object with certain methods and is passed as
    an argument to `engine_instance.play_game`.
    
    Engine instances are created by giving the game parameters to the
    `game_engine` class. Because of this, this module is only capable
    of moore/hex/neumann.  (This module also imports the fields module.)
    
    It requires the enginecfg configuration file.
    
    See the doc string for `anonymine_engine.game_engine` for details.
    
    The module also contains the `hiscores` class of which an instance
    is returned as the second return value of `anonymine_engine.play_game`.
    
    Instances of `hiscores` have methods for displaying the highscores
    and adding the new entry.
    
    The add new entry method takes an input function as an argument.
    
    See the doc string for `anonymine_engine.hiscores` for details.


Game interface and fields module ("anonymine.py", "anonymine_fields.py")
------------------------------------------------------------------------

    The fields module contains two classes for squares and hexagons.
    
    The squares' class's __init__ method takes a `moore` keyword
    parameter to differ between Moore and von Neumann neighbourhoods.
    
    The generic_field class makes the square fields, and can handle any
    positive integer amount of dimensions. (Only 2D is used by the game.)
    
    I have not yet properly documented all the needed methods of field
    classes, but if you do implement another one, make sure it has all
    of the public methods generic_field has.
    
    The interface module/main executable contains
        - A curses interface class for creating the interface object to
          send to `anonymine_engine.game_engine.play_game`.
          The interface module requires the "cursescfg" configuration file.
        - An argument handling function. (Requires argparse, no-op without.)
        - A human input function, parser function, and a quite useful `ask`
          function.
        - A main function without fault handling (leave curses).
          (Fault handling is in the __name__ == '__main__' conditional.)
        - A `play_game` function.
        - A function for retrieving nickname and a function for displaying
          highscores with the help of less(1).
        - EINTR handling on IO due to a Python+curses bug.


Field solver ("anonymine_solver.py", related: "anonymine_fields.py")
------------------------------------

    You are not expected to understand this module.
    
    It looks too complicated for doing something as simple as solving
    minesweepers, so there are probably some solvable fields that it can't
    solve.  The other way around, however, should not be the case.
    
    It is completely unaware of the "physical" representation of the fields.
    It sees them as abstract networks rather than arrays, and can work with
    pretty much anything.


Configuration files
-------------------

    cursescfg: Go ahead and hack it.
    
    enginecfg: This is trickier, because this file is usually autogenerated
    by mkenginecfg.  There's also an enginecfg.default file.


Installation procedure
======================

    configure
      |
      \--configure.py
           *
           *<--Makefile.static
           *
           *-->Makefile
                 |
                 +--check.sh
                 |    *
                 |    *-->check.py
                 |
                 \--mkenginecfg
                      *
                      *-->enginecfg.out
    
    Windows-admin.bat, Windows-user.bat
        # Install Cygwin if needed
        # Install Python on Cygwin if needed.
        ./configure
        make
        make install
        # Windows-admin.bat only: Run ./cygwin-sshd
    
    Installed enginecfg:
        enginecfg.user
        enginecfg.out
        enginecfg.default
    
    Version numbering is done ONLY in "Makefile.static".
    
    Most of the installation stuff happens in Makefile.static.


configure.py
------------

    Automatically (or manually by command line arguments) set Makefile
    variables in a newly created Makefile and append Makefile.static.
    
    It should be quite reusable.  Just remove unnecessary finder functions
    and add necessary ones.
