#!/bin/sh

# ./mkenginecfg srcdir builddir

# TODO: measure time by the time it takes to solve some known fields.

# This shell script is a wrapper around a Python script that will be spit
# out.

srcdir=$1
builddir=$2

userfile="${builddir}enginecfg.user"
defaultfile="${srcdir}enginecfg.default"
outfile="${builddir}enginecfg.out"

pyfile="${builddir}mkenginecfg.py"

# Allow user to override.
if [ -f "$userfile" ]; then
    cp "$userfile" "$outfile"
    exit 0
fi

cat > "$pyfile" << __EOF__
import pprint
import time
import sys

def main():
    cpus = int(sys.argv[1])
    start = time.time()
    i = 0
    while i < 10**8:
        i += 1
    bogomips = 100/(time.time() - start)
    
    # Magic:
    procs = int(0.83 * cpus + 0.5)
    maxtime = bogomips/27.5
    
    cfg = {
        'init-field': {
            'procs': procs,
            'maxtime': maxtime,
            'filename': '/tmp/mines.{0}',
        }
    }
    
    sys.stdout.write('# Auto generated during "build".\n')
    sys.stdout.write(pprint.pformat(cfg))
    sys.stdout.write('\n')
    sys.stdout.close()
    

if __name__ == '__main__':
    main()
__EOF__


# Count the number of logical processors.
#                       v: Don't forget the semicolon!
_ncpus0 () { nproc --all;                       } # Debian
_ncpus1 () { lscpu -p | grep -v '#' | wc -l;    } # (Linux)/Debian
_ncpus2 () { sysctl -n kern.smp.cpus;           } # BSD (Should I use this?)
_ncpus3 () { sysctl -n hw.logicalcpu;           } # BSD
_ncpus4 () { sysctl -n hw.ncpu;                 } # BSD (fallback)
_ncpus5 () { psrinfo | wc -l;                   } # (OpenSolaris)/openidiana
for n in `seq 0 5`; do
    ncpus=`_ncpus$n` 2> /dev/null && break
done

oldpwd=`pwd`
cd "$srcdir"
python "$pyfile" $ncpus > "$outfile" || cp "$defaultfile" "$outfile"
cd "$oldpwd"