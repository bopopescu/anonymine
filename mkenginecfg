#!/bin/sh

# ./mkenginecfg srcdir builddir hiscorefile

# TODO: measure time by the time it takes to solve some known fields.

# This shell script is a wrapper around a Python script that will be spit
# out.

srcdir=$1
builddir=$2
hiscorefile=$3

userfile="${builddir}enginecfg.user"
defaultfile="${srcdir}enginecfg.default"
outfile="${builddir}enginecfg.out"

pyfile="${builddir}mkenginecfg.py"

# Allow user to override.
if [ -f "$userfile" ]; then
    cp "$userfile" "$outfile"
    exit 0
fi

cat > "$pyfile" << __EOF__
import sys

def main():
    try:
        cpus = int(sys.argv[1])
        assert cpus >= 1
    except:
        sys.stderr.write(
            'Do you really have {} processors?\n'.format(sys.argv[1])
        )
        cpus = 1
    procs = int(0.83 * cpus + 0.5)
    
    hiscorefile = sys.argv[2]
    sys.stdout.write('''# Auto generated during "build".
{
    'init-field': {
        'procs':        '''+str(procs)+''',
        'filename':     '/tmp/mines.{0}',
        'sec-maxtime':  90,     # Security timeout
        'sec-maxarea':  10000,  # Maximum allowed area
    },
    'hiscores': {
        'file':         "'''+str(hiscorefile)+'''",
        'entries':      16,     # Top N, how many entries per sublist
        'maxsize':      524288, # Security: Maximum allowed filesize (bytes)
        'use-user':     True,   # List login names
        'use-nick':     True,   # Let players choose their own names
        'nick-maxlen':  100,    # Longest allowed nickname (unicode codepoints)
    },
}
''')

if __name__ == '__main__':
    main()
__EOF__

# Count the number of logical processors.
# WARNING: If the first command in a pipeline fails, the pipeline itself may
# succeed!  (wc -l says there are zero processors.)
# NOTICE                v: Don't forget the semicolon!
_n0 () { nproc --all;                               } # Debian
_n1 () { lscpu && lscpu -p | grep -v '#' | wc -l;   } # (Linux)/Debian
_n2 () { sysctl -n kern.smp.cpus;                   } # BSD (Should I use this?)
_n3 () { sysctl -n hw.logicalcpu;                   } # BSD
_n4 () { sysctl -n hw.ncpu;                         } # BSD (fallback)
_n5 () { psrinfo && psrinfo | wc -l;                } # (OpenSolaris)/openidiana
for n in `seq 0 5`; do
    ncpus=`_n$n` 2> /dev/null && break
done

oldpwd=`pwd`
cd "$srcdir"
python "$pyfile" $ncpus "$hiscorefile" > "$outfile" || cp "$defaultfile" "$outfile"
cd "$oldpwd"
