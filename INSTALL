DEPENDENCIES
============

    * Python 2.6, 2.7 or 3.x
    * The curses module. (Python bindings for curses.)
    * A screen size of at least 10 columns by 8 rows.
        (7 by 4 for non-hexagonal gametypes.)
    * A unix-like operating system or the argparse module.
    
    * less(1) for the passwords is recommended.
    * A unix-like OS is recommended for systems with multiple CPUs or
      multicore CPUs
    
    NOTICE: Normal installation will only work on unix-like operating
    systems.
    
    On unix-unlike systems you must specify the location of both
    configuration files, which is why the argparse module would
    be required on a non-nix platform.


INSTALLATION
============

    In the directory extracted from the tarball, run:
        ./configure
        make
        make install        # as root
    
    If you don't understand the above, go read
http://www.makeuseof.com/tag/compile-install-tar-gz-tar-bz2-files-ubuntu-linux/
    If you still don't understand, ask the nearest Linux user to help you
    and create a wiki page about the topic on my Github repo.
    
    You can't skip the second stage (`make`).
    
    Use "./configure -v" to make the whole installation process verbose.

    NOTICE:
        The system-wide configuration files for the game will only be created
        if they do not exist or if they have not been modified by the user.
        `make install` will fail if the format of the configuration has
        changed and incompatible configuration files that have been modified
        exist.
        
        If you don't modify the system-wide configuration files, installation
        will not fail because of this.
        
        To force an overwrite of the system-wide configuration files, run
        `make overwrite-cfg`.  If you do this because of a failed make install,
        run make install again.
    
    
    Anonymine will be installed as 'anonymine'.
    
    Run "make print-destinations" to find out where files will be installed.
    
    
    Important notes
    ===============
    
        * System wide configuration files, even if altered, will be deleted
          on uninstall.
        * The highscores file will be deleted on uninstall.
        * Anonymine expects to be run by "python", not "python2.7" etc.
        * The other version of python is expected to by "python3" or
          "python2"; make sure you have that symlink as well if you want the
          modules to be installed for both versions.
        * enginecfg is auto-generated since 0.1.19, you can override the file
          by creating `$(builddir)enginecfg.user` as your own enginecfg.
        * You may need to "touch ./*" if you are remaking after a
          reconfiguration.
    
    
    ./configure; make; make install
    ===============================
    
        ./configure will accept variables with three different syntaxes:
            ./configure --name value
            ./configure --name=value
            ./configure name=value
        
        All variables require exactly one value/argument.
        All variables will also be stored in the Makefile.
        
        The value of a variable MAY be a Makefile variable/macro.
        Ex: `./configure 'bindir=$(prefix)/bin'`
        
        The value entered on the command line will not be pre-expanded in the
        Makefile, except for "builddir" and "srcdir".  The exception is there
        to prevent issues when make is run from a different directory than
        configure.
            "srcdir" and "builddir" will automatically be converted to absolute
            paths.
        
        configure will also accept these short options:
            -f      Force; write the Makefile even if there were errors.
            -v      verbose; this also affects the Makefile
            -w      Use sys.prefix as prefix. (For quickly removing versions
                    older than 0.0.31.)
        
        The real "configure" script will handle these:
            ./configure -h
            ./configure -V
            ./configure --help
            ./configure --version
    
    
    Recognized variables
    ====================
    
        Variable                default and/or description
        --------                --------------------------
        
        prefix                  sys.prefix
        bindir                  $(prefix)/bin        # NOTE 1
        gamesdir                $(prefix)/games
        libdir                  $(prefix)/lib
        localstatedir           $(prefix)/var, /var
        sysconfdir              $(prefix)/etc, /etc
        vargamesdir             $(localstatedir)/games, $(localstatedir)
        
        EXECUTABLES             This program will be installed in $(gamesdir)
        MODULES                 See its own subsection
        MODULES_OTHERVER        See its own subsection
        
        INSTALL                 which install(8) utility to use.
                                (/usr/ucb/install on Solares)
        
        DESTDIR                 Pretend the root is here
        srcdir                  The directory extracted from the tarball.
        builddir                (Current working directory)
        
        freedesktop             'true' or 'false'; "Linux" desktop
        macosx                  'true' or 'false'; Mac OS X
        

        NOTE 1
            gamesdir will override bindir if possible, so setting bindir
            might have no effect.
        
        prefix, bindir and libdir, localstatedir, sysconfdir:
            http://www.gnu.org/prep/standards/html_node/Directory-Variables.html
        
        DESTDIR
            https://www.gnu.org/prep/standards/html_node/DESTDIR.html
        
        
        srcdir and builddir
        -------------------
        
            $(srcdir) is the directory that was extracted from the tarball.
            
            $(builddir) is the directory where make(1) is allowed to create
            "temporary" files when building (`make [all]`) the program.
            
            Both of these default to the current working directory.
        
        
        sysconfdir
            Configuration files will be stored in $(sysconfdir)/anonymine/
        
        vargamesdir
            The highscores file is $(vargamesdir)/anonymine
        
        
        EXECUTABLES
        ===========
        
            This is the directory to which this game will be installed.
            
            It will be assigned to the first variable of [gamesdir, bindir]
            that expands into a path that exists in $PATH.
            
            As a consequence: The game will probably not be installed where
            you want it to if you specify bindir=somewhere-else as it installs
            to gamesdir rather than bindir whenever possible.
        
        
        MODULES and MODULES_OTHERVER
        ============================
        
            As Python 3 is slightly backwards-incompatible with Python 2,
            both version may be installed.
            
            This game works with both versions of Python, and installs three
            modules that could be used by some other program.
            
            The modules will be copied to $(MODULES). And if there is another
            Python, symlinks to the installed modules will be created in
            $(MODULES_OTHERVER).
            
            The default value of MODULES and MODULES_OTHERVER is the first
            of the following that exists in sys.path:
                $(libdir)/python$(major)/site-packages
                $(libdir)/python$(major).$(minor)/site-packages
                $(libdir)/python$(major)/dist-packages
                $(libdir)/python$(major).$(minor)/dist-packages
            
            $(major) and $(minor) are pre-expanded and do NOT exist in the
            Makefile.
            
            There's a known bug with combining having both Python versions
            and using the DESTDIR variable.  The symlinks may not be pointing
            where you expected them to.
    
    
    srcdir, builddir and DESTDIR
    ============================
    
        srcdir          Directory extracted from the tarball.
        
        builddir        Temporary storage;
                        directory for files from the build process.
        
        DESTDIR         Prepended to all paths on install and uninstall;
                        alternative root.
        
        
        Both srcdir and builddir default to the current working directory.
        
        These three variables can be sent to either ./configure or make,
        but there are some differences between the two.
        
        ./configure will prepend variables to the Makefile which will be
        saved in builddir.
        
        Sending builddir=foo to ./configure will create the Makefile inside
        builddir. You can cd to builddir and run `make && sudo make install`
        without specifiying any arguments to make.
        
        While if you send builddir=foo to make rather than ./configure, you'll
        have to run `make builddir=foo && sudo make builddir=foo install`
        in the current directory.
        
        NOTICE: There's a known bug with combining having both Python versions
        and using the DESTDIR variable.  The symlinks may not be pointing
        where you expected them to.
    
    Targets in the Makefile
    =======================
    
        all (default)
            Fix the shebang line of the programs to be installed
        
        clean
            Remove stage files and bytecode.
        
        distclean
            Like clean, but also remove the Makefile.
            rm $(builddir)Makefile
        
        print-destinations
            Print where things will be installed.
        
        install
            Altered configuration files will not be touched by this target.
            If the existing configuration file is incompatible but does not
            identify itself as unmodified, installation will fail and the
            configuration file must be manually edited.
        
        uninstall
            This will remove the system-wide configuration files as well.
            To remove an installed version older than 0.0.31 you'll need
            to run ./configure with the -w option.
            WARNING: This removes the configuration files, even if altered.
            WARNING: This removed the highscores file.
        
        check
            Check that everything seems to work.
        
        release
            (You are me.)
        
        make dist
            'check' that I am not making an embarrassing release,
            make 'tarballs' and the 'zip' and 'release' them.
