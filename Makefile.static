
##############################################################################

# If you have a suggestion for a name, tell me about it:
# <oskar.skog.finland@gmail.com>

# No quotes for these four:
# NAME = [technical] name
# NAME_C = Capitalized name (human name)
# DESCRIPTION =
# VERSION = x.y.z
NAME := anonymine
NAME_C := Anonymine
DESCRIPTION = Minesweeper without guessing
VERSION := 0.2.17

# Five more variables are required: sysconfdir, vargamesdir, EXECUTABLES and
# MODULES, and MODULES_OTHERVER which may be set to "non-existent".
# They will be prepended to the actual Makefile by the "configure" script.

# srcdir, builddir and DESTDIR may also be prepended by the "configure"
# script.

# freedesktop == "" if not freedesktop.org DE.
# windows == "" if not on Windows.
# macosx == "" if not on Mac OS X.

# See "INSTALL".

# Define these to prevent bugs on certain platforms.
PRE_INSTALL = true
NORMAL_INSTALL = true
POST_INSTALL = true
PRE_UNINSTALL = true
NORMAL_UNINSTALL = true
POST_UNINSTALL = true

##############################################################################

verbose ?= true
info := test "$(verbose)" != true || echo '//'

# Desktop specific prefixes:
# FD_	freedesktop.org
# OSX_	Mac OS X
# CYG_	Cygwin
# W_	Cygwin, "temporary" variables

MAIN_SRC := $(srcdir)$(NAME).py
MAIN_STAGE := $(builddir)$(NAME)
MAIN_DEST := $(DESTDIR)$(EXECUTABLES)/$(NAME)

HISCORE_FILE := $(DESTDIR)$(vargamesdir)/anonymine
ENGINECFG_STAGE := $(builddir)enginecfg.out

# freedesktop.org, see desktop/README
FD_MK_DESKTOP := $(srcdir)desktop/desktop.sh
FD_DESKTOP_STAGE := $(builddir)$(NAME).desktop
FD_DESKTOP_DEST := $(DESTDIR)$(prefix)/share/applications/$(NAME).desktop

# Mac OS X, see desktop/README
OSX_WRAPPER := $(builddir)$(NAME)-wrapper
OSX_INFO_PLIST := $(builddir)Info.plist
OSX_MK_INFO_PLIST := $(srcdir)desktop/Info.plist.py
OSX_ICON := $(builddir)icon.icns
OSX_MK_ICON := $(srcdir)desktop/icon.icns.py

# Windows/Cygwin, see desktop/README
CYG_ICO_SRC := $(srcdir)desktop/$(NAME).ico
CYG_ICO_DIR := $(DESTDIR)$(prefix)/share/pixmaps
CYG_ICO_DEST := $(CYG_ICO_DIR)/$(NAME).ico

# make clean
ALL_STAGE := "$(MAIN_STAGE)" "$(OSX_WRAPPER)" "$(OSX_INFO_PLIST)" \
	"$(OSX_ICON)" "$(builddir)check.py" "$(FD_DESKTOP_STAGE)" \
	"$(ENGINECFG_STAGE)" "$(builddir)mkenginecfg.py"

all : $(MAIN_STAGE) $(ENGINECFG_STAGE)
	@$(info) 'Maybe building .desktop and app/bundle'
	@if [ -n "$(freedesktop)" ]; then \
		cd "$(builddir)" && make build-freedesktop > /dev/null; \
	fi
	@if [ -n "$(macosx)" ]; then \
		cd "$(builddir)" && make build-macosx > /dev/null; \
	fi

$(MAIN_STAGE) : $(MAIN_SRC)
	@$(info) 'Creating the appropriate shebang line'
	@echo "#!`which python`" > "$(MAIN_STAGE)"
	@cat "$(MAIN_SRC)" >> "$(MAIN_STAGE)"

$(ENGINECFG_STAGE) : $(srcdir)mkenginecfg
	@$(info) 'Making enginecfg: mostly counting processors'
	@"$(srcdir)mkenginecfg" "$(srcdir)" "$(builddir)" "$(HISCORE_FILE)"

build-freedesktop : FORCE
	@: # Refer to desktop/README for information about the following.
	@"$(FD_MK_DESKTOP)" "$(FD_DESKTOP_STAGE)" $(NAME) "$(NAME_C)" \
		"$(DESCRIPTION) -- version $(VERSION)"

build-macosx : FORCE
	@: # Refer to desktop/README for information about the following.
	@echo '#!/bin/sh' > "$(OSX_WRAPPER)"
	@echo 'open -b com.apple.terminal' "$(MAIN_DEST)" >> "$(OSX_WRAPPER)"
	@python "$(OSX_MK_INFO_PLIST)" "$(OSX_INFO_PLIST)" "$(NAME_C)" \
		"$(NAME_C) - $(DESCRIPTION)" $(VERSION) $(NAME)
	@python "$(OSX_MK_ICON)" "$(OSX_ICON)" "$(srcdir)desktop/$(NAME)"

clean : FORCE
	@rm $(ALL_STAGE) 2> /dev/null || true
	@: # Remove the bytecode files.
	@rm -- "$(srcdir)"*.pyc 2> /dev/null || true
	@rm -r -- "$(srcdir)"__pycache__/ 2> /dev/null || true

# configure.py will choose /usr/ucb/install on Solares.
INSTALL ?= install

INSTALL_CFG := python "$(srcdir)install-cfg" "$(INSTALL)"

CFG_DIR := $(DESTDIR)$(sysconfdir)/$(NAME)
# Modules: FOO_SRC, FOO_DEST, FOO_DEST_OTHERVER
ENGINE_SRC := $(srcdir)$(NAME)_engine.py
ENGINE_DEST := $(DESTDIR)$(MODULES)/$(NAME)_engine.py
ENGINE_DEST_OTHERVER := $(DESTDIR)$(MODULES_OTHERVER)/$(NAME)_engine.py
SOLVER_SRC := $(srcdir)$(NAME)_solver.py
SOLVER_DEST := $(DESTDIR)$(MODULES)/$(NAME)_solver.py
SOLVER_DEST_OTHERVER := $(DESTDIR)$(MODULES_OTHERVER)/$(NAME)_solver.py
FIELDS_SRC := $(srcdir)$(NAME)_fields.py
FIELDS_DEST := $(DESTDIR)$(MODULES)/$(NAME)_fields.py
FIELDS_DEST_OTHERVER := $(DESTDIR)$(MODULES_OTHERVER)/$(NAME)_fields.py

# Installation commands for modules:
NO_OTHERVER := test "$(MODULES_OTHERVER)" "=" non-existent

# See desktop/README
FD_ICON_SRC := $(srcdir)desktop/$(NAME)-$$size.png
FD_ICON_DESTDIR := $(DESTDIR)$(prefix)/share/icons/hicolor/$$size/apps
FD_ICON_SIZES := 16x16 32x32 64x64 256x256
FD_ICON_DEST := $(FD_ICON_DESTDIR)/$(NAME).png

# See desktop/README
BUNDLE := $(DESTDIR)/Applications/$(NAME_C).app


check-install-cfg : FORCE
	@$(PRE_INSTALL)
	@: # Cause installation to fail if the configuration is incompatible.
	@$(info) 'Installing or checking configuration'
	@: # Install the directory for the configuration files as install-dirs
	@: # might not have been run yet.
	@mkdir -p "$(CFG_DIR)"
	@$(INSTALL_CFG) "$(srcdir)cursescfg" "$(CFG_DIR)/cursescfg"
	@$(INSTALL_CFG) "$(ENGINECFG_STAGE)" "$(CFG_DIR)/enginecfg"

overwrite-cfg: FORCE
	@$(INSTALL) -m 644 "$(srcdir)cursescfg" "$(CFG_DIR)/cursescfg"
	@$(INSTALL) -m 644 "$(ENGINECFG_STAGE)" "$(CFG_DIR)/enginecfg"
	@$(info) "Configuration has been overwritten"
	@$(info) "All (if any) system-wide modifications are lost"

install-dirs : FORCE
	@$(info) 'Installing directories'
	@mkdir -p "$(CFG_DIR)" || true
	@mkdir -p "$(DESTDIR)$(vargamesdir)" || true
	@mkdir -p "$(DESTDIR)$(EXECUTABLES)" || true
	@mkdir -p "$(DESTDIR)$(MODULES)" || true
	@if [ "$(MODULES_OTHERVER)" != "non-existent" ]; then \
		mkdir -p "$(DESTDIR)$(MODULES_OTHERVER)" || true; \
	fi
	@if [ -n "$(freedesktop)" ]; then \
		mkdir -p "$(DESTDIR)$(prefix)/share/applications" || true; \
		mkdir -p "$(DESTDIR)$(prefix)/share/pixmaps" || true; \
	fi
	@if [ -n "$(macosx)" ]; then \
		$(INSTALL) -d "$(BUNDLE)/Contents"; \
		$(INSTALL) -d "$(BUNDLE)/Contents/MacOS"; \
		$(INSTALL) -d "$(BUNDLE)/Contents/Resources"; \
	fi

install : check-install-cfg install-dirs
	@$(NORMAL_INSTALL)
	@: # When the configuration has been installed, install the main
	@: # program, and then the modules for both versions of Python.
	@$(info) 'Installing executable and modules'
	@$(INSTALL) -m 755 "$(MAIN_STAGE)" "$(MAIN_DEST)"
	@$(INSTALL) -m 644 "$(ENGINE_SRC)" "$(ENGINE_DEST)"
	@$(INSTALL) -m 644 "$(SOLVER_SRC)" "$(SOLVER_DEST)"
	@$(INSTALL) -m 644 "$(FIELDS_SRC)" "$(FIELDS_DEST)"
	@: # Create highscore file unless it already exists.
	@touch "$(HISCORE_FILE)"
	@chmod 666 "$(HISCORE_FILE)"
	@if [ -n "$(freedesktop)" ]; then \
		$(info) 'Installing icons and .desktop (NORMAL_INSTALL)'; \
		$(INSTALL) -m 644 "$(FD_DESKTOP_STAGE)" "$(FD_DESKTOP_DEST)"; \
		for size in $(FD_ICON_SIZES); do \
			$(INSTALL) -d "$(FD_ICON_DESTDIR)"; \
			$(INSTALL) -m 644 "$(FD_ICON_SRC)" "$(FD_ICON_DEST)"; \
		done; \
	fi
	@if [ -n "$(macosx)" ]; then \
		$(info) 'Installing app/bundle'; \
		$(INSTALL) -m 644 "$(OSX_INFO_PLIST)" \
			"$(BUNDLE)/Contents/Info.plist"; \
		$(INSTALL) -m 755 "$(OSX_WRAPPER)" \
			"$(BUNDLE)/Contents/MacOS/$(NAME)-wrapper"; \
		$(INSTALL) -m 644 "$(OSX_ICON)" \
			"$(BUNDLE)/Contents/Resources/icon.icns"; \
	fi
	@$(info) 'Symlinking the modules to the other Python'
	@$(NO_OTHERVER) || ln -sf "$(ENGINE_DEST)" "$(ENGINE_DEST_OTHERVER)"
	@$(NO_OTHERVER) || ln -sf "$(SOLVER_DEST)" "$(SOLVER_DEST_OTHERVER)"
	@$(NO_OTHERVER) || ln -sf "$(FIELDS_DEST)" "$(FIELDS_DEST_OTHERVER)"
	@$(POST_INSTALL)
	@if [ -n "$(freedesktop)" ]; then \
		$(info) 'Installing icons and .desktop (POST_INSTALL)'; \
		xdg-desktop-menu install --novendor --mode system \
			"$(FD_DESKTOP_DEST)" || true; \
	fi
	@if [ -n "$(windows)" ]; then \
		$(info) 'Installing shortcuts'; \
		$(INSTALL) "$(CYG_ICO_SRC)" "$(CYG_ICO_DEST)"; \
		mkshortcut -A -P -a '-lc $(NAME)' -n "$(NAME_C)" \
			-i "$(CYG_ICO_DEST)" /bin/bash.exe || \
			mkshortcut -P -a '-lc $(NAME)' -n "$(NAME_C)" \
			-i "$(CYG_ICO_DEST)" /bin/bash.exe; \
		mkshortcut -A -D -a '-lc $(NAME)' -n "$(NAME_C)" \
			-i "$(CYG_ICO_DEST)" /bin/bash.exe || \
			mkshortcut -D -a '-lc $(NAME)' -n "$(NAME_C)" \
			-i "$(CYG_ICO_DEST)" /bin/bash.exe; \
	fi

# http://superuser.com/questions/86078/where-do-start-menu-all-programs-shortcuts-reside
W_C := $(DESTDIR)/cygdrive/c
W_U := $(DESTDIR)`cygpath --unix '$(USERPROFILE)'`
W_F := $(NAME_C).lnk
W_M := /Start Menu/Programs/
# W_C is the C drive, W_U is the users real home directory,
# W_F is the filename and W_M is a part of the path to the start menu
# common for both NT 5 and 6.
CYG_STARTMENU_NT5X_ALL := $(W_C)/Documents and Settings/All Users$(W_M)$(W_F)
CYG_STARTMENU_NT5X_ME := $(W_U)$(W_M)$(W_F)
CYG_STARTMENU_NT6X_ALL := $(W_C)/ProgramData/Microsoft/Windows$(W_M)$(W_F)
CYG_STARTMENU_NT6X_ME := $(W_U)/AppData/Roaming/Microsoft/Windows$(W_M)$(W_F)
CYG_DESKTOP_NT5X_ALL := $(W_C)/Documents and Settings/All Users/Desktop$(W_F)
CYG_DESKTOP_NT6X_ALL := $(W_C)/Users/Public/Desktop/$(W_F)
CYG_DESKTOP_ME := $(W_U)/Desktop/$(W_F)

uninstall: FORCE
	@$(PRE_UNINSTALL)
	@if [ -n "$(freedesktop)" ]; then \
		xdg-desktop-menu uninstall --novendor --mode system \
			"$(FD_DESKTOP_DEST)" || true; \
	fi
	@$(NORMAL_UNINSTALL)
	@-rm -r "$(CFG_DIR)"
	@-rm "$(ENGINE_DEST)" "$(SOLVER_DEST)" "$(FIELDS_DEST)" "$(MAIN_DEST)"
	@$(NO_OTHERVER) || rm "$(ENGINE_DEST_OTHERVER)" \
		"$(SOLVER_DEST_OTHERVER)" "$(FIELDS_DEST_OTHERVER)" || true
	@if [ -n "$(freedesktop)" ]; then \
		rm "$(FD_DESKTOP_DEST)" || true; \
		for size in $(FD_ICON_SIZES); do \
			rm "$(FD_ICON_DEST)" || true; \
		done; \
	fi
	@if [ -n "$(macosx)" ]; then \
		rm -r "$(BUNDLE)" || true; \
	fi
	@if [ -n "$(windows)" ]; then \
		rm "$(CYG_STARTMENU_NT5X_ALL)" || true; \
		rm "$(CYG_STARTMENU_NT5X_ME)" || true; \
		rm "$(CYG_STARTMENU_NT6X_ALL)" || true; \
		rm "$(CYG_STARTMENU_NT6X_ME)" || true; \
		rm "$(CYG_DESKTOP_NT5X_ALL)" || true; \
		rm "$(CYG_DESKTOP_NT6X_ALL)" || true; \
		rm "$(CYG_DESKTOP_ME)" || true; \
	fi

print-destinations: FORCE
	@echo "Main program:         " $(MAIN_DEST)
	@echo "Engine module:        " $(ENGINE_DEST)
	@echo "Solver module:        " $(SOLVER_DEST)
	@echo "Fields module:        " $(FIELDS_DEST)
	@$(NO_OTHERVER) || \
		echo "Engine module symlink:" $(ENGINE_DEST_OTHERVER)
	@$(NO_OTHERVER) || \
		echo "Solver module symlink:" $(SOLVER_DEST_OTHERVER)
	@$(NO_OTHERVER) || \
		echo "Fields module symlink:" $(FIELDS_DEST_OTHERVER)
	@echo "Configuration files:  " $(CFG_DIR) '(directory)'
	@echo "Highscores file:      " $(HISCORE_FILE)
	@if [ -n "$(freedesktop)" ]; then \
		echo "[freedesktop.org] .desktop:" $(FD_DESKTOP_DEST); \
		for size in $(FD_ICON_SIZES); do \
			echo "[freedesktop.org] Icon:    " $(FD_ICON_DEST); \
		done; \
	fi
	@if [ -n "$(macosx)" ]; then \
		echo "[Mac OS X] Bundle (App):" $(BUNDLE) '(directory)'; \
	fi
	@if [ -n "$(windows)" ]; then \
		echo "[Windows] Shortcut:" $(CYG_STARTMENU_NT5X_ALL); \
		echo "[Windows] Shortcut:" $(CYG_STARTMENU_NT5X_ME); \
		echo "[Windows] Shortcut:" $(CYG_STARTMENU_NT6X_ALL); \
		echo "[Windows] Shortcut:" $(CYG_STARTMENU_NT6X_ME); \
		echo "[Windows] Shortcut:" $(CYG_DESKTOP_NT5X_ALL); \
		echo "[Windows] Shortcut:" $(CYG_DESKTOP_NT6X_ALL); \
		echo "[Windows] Shortcut:" $(CYG_DESKTOP_ME); \
		echo "[Windows] Icon:    " $(CYG_ICO_DEST); \
	fi

PKG_INDIR := $(NAME)-$(VERSION)
PKG := $(builddir)$(PKG_INDIR)
# .txt in zips.
PKG_TEXTFILES := BUGS ChangeLog FAQ INSTALL NEWS README desktop/FILES \
	desktop/README LICENSE
# Already CRLF + old crap.
PKG_NOCONV := Windows.txt Windows-admin.bat Windows-user.bat \
	configure check.sh desktop/$(NAME).ico desktop/desktop.sh \
	desktop/$(NAME)-*.png desktop/$(NAME)*.xcf mkenginecfg
PKG_FILES := $(NAME).py $(NAME)_engine.py $(NAME)_fields.py $(NAME)_solver.py \
	configure.py Makefile.static install-cfg enginecfg.default \
	cursescfg test.py desktop/Info.plist.py desktop/icon.icns.py
PKG_SUBDIRS := desktop

check: FORCE
	@$(srcdir)check.sh "$(srcdir)" "$(builddir)"

dist : tarballs zip
	@$(info) 'make check; This will take a while'
	@make check >/dev/null
	@$(info) 'make release'
	@make release >/dev/null

release : FORCE
	@cp -t ~www-data/archive/"$(NAME)/" "$(PKG).tar.gz" \
		|| echo You are not me.
	@cp -t ~www-data/archive/"$(NAME)/" "$(PKG).zip" \
		|| echo You are not me.

tarballs : FORCE
	@$(info) "Building tarballs"
	@mkdir "$(PKG)"
	@for subdir in $(PKG_SUBDIRS); do mkdir "$(PKG)/$$subdir"; done;
	@: # Copy all files normally:
	@for f in $(PKG_TEXTFILES); do cp "$(srcdir)$$f" "$(PKG)/$$f"; done
	@for f in $(PKG_NOCONV); do cp "$(srcdir)$$f" "$(PKG)/$$f"; done
	@for f in $(PKG_FILES); do cp "$(srcdir)$$f" "$(PKG)/$$f"; done
	@: # Tar:
	@cd "$(builddir)" && tar -cf "$(PKG_INDIR).tar" "$(PKG_INDIR)"
	@: # Compress:
	@gzip -f9k -- "$(PKG).tar"
	@: # Clean-up:
	@rm -- "$(PKG).tar"
	@rm -r -- "$(PKG)"

zip : FORCE
	@$(info) "Building zip for Windows version"
	@mkdir "$(PKG)"
	@for subdir in $(PKG_SUBDIRS); do mkdir "$(PKG)/$$subdir"; done;
	@: # /(.*)$/ -> /\1.txt/
	@for f in $(PKG_TEXTFILES); do \
		unix2dos -q -n "$(srcdir)$$f" "$(PKG)/$$f.txt"; \
	done
	@: # Already with CRLF line ends + shell scripts.
	@for f in $(PKG_NOCONV); do cp "$(srcdir)$$f" "$(PKG)/$$f"; done
	@: # Notepad is stupid.
	@for f in $(PKG_FILES); \
		do unix2dos -q -n "$(srcdir)$$f" "$(PKG)/$$f"; \
	done
	@cd "$(builddir)" && zip -rXq "$(PKG_INDIR).zip" "$(PKG_INDIR)"
	@rm -r -- "$(PKG)"


FORCE:
